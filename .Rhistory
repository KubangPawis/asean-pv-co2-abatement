library(scales)
library(ggrepel)
renv::install("ggrepel")
usethis::use_package("ggrepel")
library(tidyverse)
library(ggplot2)
library(scales)
library(ggrepel)
power_emissions_2023 <- co2_emissions %>%
filter(Sector == "Power Industry", Year == 2023) %>%
mutate(
co2_emissions_mt = co2_emissions_g / 1e12, # Convert grams to million metric tons
country = fct_reorder(country, co2_emissions_mt)
)
# Create the plot
ggplot(power_emissions_2023, aes(x = co2_emissions_mt, y = country, fill = co2_emissions_mt)) +
geom_col(show.legend = FALSE) +
geom_text(aes(label = paste(round(co2_emissions_mt), "M")), hjust = -0.1, size = 3.5, color = "black") +
scale_fill_gradient(low = "lightblue", high = "darkred") +
scale_x_continuous(labels = scales::comma_format(suffix = " M tons"), expand = expansion(mult = c(0, 0.15))) +
labs(
title = "Power Industry CO₂ Emissions in ASEAN (2023)",
subtitle = "Indonesia is the largest emitter, followed by Vietnam and Malaysia.",
x = "CO₂ Emissions (Million Metric Tons)",
y = "Country"
) +
theme_minimal(base_size = 14) +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.x = element_blank(),
axis.title.y = element_blank())
grid_intensity_data <- summary_final %>%
filter(!is.na(ef_gco2_per_kwh)) %>%
mutate(country = fct_reorder(country, ef_gco2_per_kwh))
# Create the plot
ggplot(grid_intensity_data, aes(x = ef_gco2_per_kwh, y = country, fill = ef_gco2_per_kwh)) +
geom_col(show.legend = FALSE) +
geom_text(aes(label = round(ef_gco2_per_kwh, 1)), hjust = -0.2, size = 4) +
scale_fill_gradient(low = "seagreen3", high = "firebrick3") +
scale_x_continuous(expand = expansion(mult = c(0, 0.1))) +
labs(
title = "Grid Emission Intensity Across ASEAN",
subtitle = "Indonesia and Malaysia have the most carbon-intensive electricity grids.",
x = "Emission Factor (gCO₂ per kWh)",
y = "Country"
) +
theme_minimal(base_size = 14) +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.x = element_blank(),
axis.title.y = element_blank())
```{r plot-pv-factor}
# Prepare data for plotting
pv_factor_data <- summary_final %>%
mutate(country = fct_reorder(country, solar_capacity_factor))
# Create the plot
ggplot(pv_factor_data, aes(x = solar_capacity_factor, y = country)) +
geom_col(fill = "orange") +
geom_text(aes(label = scales::percent(solar_capacity_factor, accuracy = 0.1)), hjust = -0.2, size = 4) +
scale_x_continuous(labels = scales::percent_format(accuracy = 1), expand = expansion(mult = c(0, 0.15))) +
labs(
title = "Solar PV Capacity Factor in ASEAN Countries",
subtitle = "The region shows consistently high potential for solar energy generation.",
x = "Solar Capacity Factor",
y = "Country"
) +
theme_minimal(base_size = 14) +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.x = element_blank(),
axis.title.y = element_blank())
asean_analysis_data <- power_emissions_2023 %>%
# Join with grid emission data
left_join(grid_emission, by = "country") %>%
# Join with solar potential data
left_join(pv_potential, by = "country") %>%
# Select only the columns needed for the analysis
select(country, co2_emissions_g, ef_gco2_per_kwh, solar_capacity_factor) %>%
# Calculate the abatement metrics described in the report
mutate(
# Annual kWh from a 5 kW system: 5kW * 8760 hours/year * capacity factor
annual_kwh_per_home = 5 * 8760 * solar_capacity_factor,
# CO2 avoided per home (grams) = Annual kWh * Grid Emission Factor
co2_avoided_per_home = annual_kwh_per_home * ef_gco2_per_kwh,
# The 5% reduction target in grams
reduction_target_g = co2_emissions_g * 0.05,
# Number of homes required = Target / Savings per home
homes_required = reduction_target_g / co2_avoided_per_home
)
co2_avoided_data <- asean_analysis_data %>%
filter(!is.na(co2_avoided_per_home)) %>%
mutate(
co2_avoided_tons = co2_avoided_per_home / 1e6, # Convert grams to metric tons
country = fct_reorder(country, co2_avoided_tons)
)
# Create the plot
ggplot(co2_avoided_data, aes(x = co2_avoided_tons, y = country, fill = co2_avoided_tons)) +
geom_col(show.legend = FALSE) +
geom_text(aes(label = round(co2_avoided_tons, 1)), hjust = -0.2, size = 4) +
scale_fill_gradient(low = "lightgreen", high = "darkgreen") +
scale_x_continuous(expand = expansion(mult = c(0, 0.1))) +
labs(
title = "Annual CO₂ Abatement per 5 kW Residential Solar System",
subtitle = "The highest impact is seen in countries with the most carbon-intensive grids.",
x = "CO₂ Avoided (Metric Tons per Home per Year)",
y = "Country"
) +
theme_minimal(base_size = 14) +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.x = element_blank(),
axis.title.y = element_blank())
# Prepare data for plotting
homes_required_data <- asean_analysis_data %>%
filter(!is.na(homes_required)) %>%
mutate(country = fct_reorder(country, homes_required))
# Create the plot
ggplot(homes_required_data, aes(x = homes_required, y = country, fill = homes_required)) +
geom_col(show.legend = FALSE) +
geom_text(aes(label = scales::comma(round(homes_required, -3))), hjust = -0.1, size = 3.5) +
scale_fill_gradient(low = "lightgoldenrod1", high = "darkorange3") +
scale_x_continuous(labels = scales::comma_format(), expand = expansion(mult = c(0, 0.15))) +
labs(
title = "Number of Homes Needed to Achieve a 5% Reduction in Power-Sector CO₂ Emissions",
subtitle = "Based on 2023 emissions and a 5 kW solar system per home.",
x = "Number of Homes Required",
y = "Country"
) +
theme_minimal(base_size = 14) +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.x = element_blank(),
axis.title.y = element_blank())
renv::snapshot()
library(shiny); runApp('inst/app/CO2_Dashboard.R')
library(readr)
library(dplyr)
library(tidyr)
library(magrittr)
library(here)
# [Variables]
HOURS_PER_YEAR <- 8760
pv_system_sizes <- c(3, 5, 10)                  # kW
target_reduction_values <- c(0.01, 0.05, 0.10)  # Percentage
scenarios <- crossing(PV_SYSTEM_SIZE = pv_system_sizes,
TARGET_REDUCTION = target_reduction_values)
# [Data Load]
ds_path = here(file.path("data", "asean_merged.csv"))
ds <- read_csv(ds_path, col_names = TRUE)
# [Solar Abatement Computations per ASEAN Country]
## Data Export for Analysis
results_ds <- scenarios %>%
crossing(ds) %>%
mutate(
annual_pv_electricity_per_home = PV_SYSTEM_SIZE * HOURS_PER_YEAR * solar_capacity_factor,
co2_avoided_per_home = annual_pv_electricity_per_home * ef_gco2_per_kwh,
homes_required = (TARGET_REDUCTION * co2_emissions_g) / co2_avoided_per_home
)
View(results_ds)
## Helper Function for Dashboard
compute_abatement <- function(df, pv_size, target_reduc, target_country, hours_per_yr=8760, round_to=0) {
df %>%
mutate(
annual_pv_electricity_per_home = pv_size * hours_per_yr * solar_capacity_factor,
co2_avoided_per_home = annual_pv_electricity_per_home * ef_gco2_per_kwh,
homes_required = (target_reduc * co2_emissions_g) / co2_avoided_per_home
) %>%
filter(country == target_country) %>%
pull(homes_required) %>%
# anonymous function to ensure NA when country not found
{
if (length(.) == 0) NA_real_
else if (!is.na(round_to)) round(., round_to)
else .
}
}
# [Data Export]
out_path <- here(file.path("data", "asean_summary_final.csv"))
if (!file.exists(out_path)) {
write.csv(ds, out_path)
message(out_path, " successfully created")
} else {
message("Skipped writing ", out_path, "; file already exists.")
}
library(readr)
library(dplyr)
library(tidyr)
library(magrittr)
library(here)
# [Variables]
HOURS_PER_YEAR <- 8760
pv_system_sizes <- c(3, 5, 10)                  # kW
target_reduction_values <- c(0.01, 0.05, 0.10)  # Percentage
scenarios <- crossing(PV_SYSTEM_SIZE = pv_system_sizes,
TARGET_REDUCTION = target_reduction_values)
# [Data Load]
ds_path = here(file.path("data", "asean_merged.csv"))
ds <- read_csv(ds_path, col_names = TRUE)
# [Solar Abatement Computations per ASEAN Country]
## Data Export for Analysis
results_ds <- scenarios %>%
crossing(ds) %>%
mutate(
annual_pv_electricity_per_home = PV_SYSTEM_SIZE * HOURS_PER_YEAR * solar_capacity_factor,
co2_avoided_per_home = annual_pv_electricity_per_home * ef_gco2_per_kwh,
homes_required = (TARGET_REDUCTION * co2_emissions_g) / co2_avoided_per_home
)
View(results_ds)
## Helper Function for Dashboard
compute_abatement <- function(df, pv_size, target_reduc, target_country, hours_per_yr=8760, round_to=0) {
df %>%
mutate(
annual_pv_electricity_per_home = pv_size * hours_per_yr * solar_capacity_factor,
co2_avoided_per_home = annual_pv_electricity_per_home * ef_gco2_per_kwh,
homes_required = (target_reduc * co2_emissions_g) / co2_avoided_per_home
) %>%
filter(country == target_country) %>%
pull(homes_required) %>%
# anonymous function to ensure NA when country not found
{
if (length(.) == 0) NA_real_
else if (!is.na(round_to)) round(., round_to)
else .
}
}
# [Data Export]
out_path <- here(file.path("data", "asean_summary_final.csv"))
if (!file.exists(out_path)) {
write.csv(results_ds, out_path)
message(out_path, " successfully created")
} else {
message("Skipped writing ", out_path, "; file already exists.")
}
runApp('inst/app/CO2_Dashboard.R')
runApp('inst/app/CO2_Dashboard.R')
runApp('inst/app/CO2_Dashboard.R')
runApp('inst/app/CO2_Dashboard.R')
runApp('inst/app/CO2_Dashboard.R')
runApp('inst/app/CO2_Dashboard.R')
# Imports
library(readr)
library(tidyr)
library(ggplot2)
library(knitr)
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE,
cache = TRUE
)
# Data Load
asean_summary_path <- file.path("data", "asean_summary_final.csv")
asean_summary_data <- read.csv(asean_summary_path)
print(getwd())
# Imports
library(readr)
library(tidyr)
library(ggplot2)
library(knitr)
library(here)
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE,
cache = TRUE
)
# Data Load
asean_summary_path <- here(file.path("data", "asean_summary_final.csv"))
asean_summary_data <- read.csv(asean_summary_path)
ggplot(asean_summary_data,
aes(x = TARGET_REDUCTION * 100,      # convert to % on x-axis
y = homes_required / 1e6,        # millions of homes on y-axis
color = factor(PV_SYSTEM_SIZE))) +# separate line per system size
geom_line(size = 1) +
facet_wrap(~ country, scales = "free_y") +  # one plot per country
scale_x_continuous(breaks = c(1,5,10)) +
scale_y_continuous(labels = scales::comma) +
labs(
x      = "CO₂ reduction target (%)",
y      = "Homes required (million)",
color  = "PV size (kW)",
title  = "Sensitivity of Homes Required to PV Size and CO₂ Target"
) +
theme_minimal(base_size = 13) +
theme(
legend.position = "bottom",
panel.grid.minor = element_blank()
)
ggplot(asean_summary_data,
aes(x = TARGET_REDUCTION * 100,      # convert to % on x-axis
y = homes_required / 1e6,        # millions of homes on y-axis
color = factor(PV_SYSTEM_SIZE))) +# separate line per system size
geom_line(size = 1) +
facet_wrap(~ country, scales = "free_y") +  # one plot per country
scale_x_continuous(breaks = c(1,5,10)) +
scale_y_continuous(labels = scales::comma) +
labs(
x      = "CO₂ reduction target (%)",
y      = "Homes required (million)",
color  = "PV size (kW)",
title  = "Sensitivity of Homes Required to PV Size and CO₂ Target"
) +
theme_minimal(base_size = 13) +
theme(
legend.position = "bottom",
panel.grid.minor = element_blank()
)
ggplot(asean_summary_data,
aes(x = TARGET_REDUCTION * 100,      # convert to % on x-axis
y = homes_required / 1e6,        # millions of homes on y-axis
color = factor(PV_SYSTEM_SIZE))) +# separate line per system size
geom_line(size = 1) +
facet_wrap(~ country, scales = "free_y") +  # one plot per country
scale_x_continuous(breaks = c(1,5,10)) +
scale_y_continuous(labels = scales::comma) +
labs(
x      = "CO₂ reduction target (%)",
y      = "Homes required (million)",
color  = "PV size (kW)",
title  = "Sensitivity of Homes Required to PV Size and CO₂ Target"
) +
theme_minimal(base_size = 13) +
theme(
legend.position = "bottom",
panel.grid.minor = element_blank()
)
ggplot(asean_summary_data,
aes(x = TARGET_REDUCTION * 100,      # convert to % on x-axis
y = homes_required / 1e6,        # millions of homes on y-axis
color = factor(PV_SYSTEM_SIZE))) +# separate line per system size
geom_line(size = 1) +
facet_wrap(~ country, scales = "free_y") +  # one plot per country
scale_x_continuous(breaks = c(1,5,10)) +
scale_y_continuous(labels = scales::comma) +
labs(
x      = "CO₂ reduction target (%)",
y      = "Homes required (million)",
color  = "PV size (kW)",
title  = "Sensitivity of Homes Required to PV Size and CO₂ Target"
) +
theme_minimal(base_size = 13) +
theme(
legend.position = "bottom",
panel.grid.minor = element_blank()
)
ggplot(asean_summary_data,
aes(x = TARGET_REDUCTION * 100,      # convert to % on x-axis
y = homes_required / 1e6,        # millions of homes on y-axis
color = factor(PV_SYSTEM_SIZE))) +# separate line per system size
geom_line(size = 1) +
facet_wrap(~ country, scales = "free_y") +  # one plot per country
scale_x_continuous(breaks = c(1,5,10)) +
scale_y_continuous(labels = scales::comma) +
labs(
x      = "CO₂ reduction target (%)",
y      = "Homes required (million)",
color  = "PV size (kW)",
title  = "Sensitivity of Homes Required to PV Size and CO₂ Target"
) +
theme_minimal(base_size = 13) +
theme(
legend.position = "bottom",
panel.grid.minor = element_blank()
)
ggplot(asean_summary_data,
aes(x = TARGET_REDUCTION * 100,      # convert to % on x-axis
y = homes_required / 1e6,        # millions of homes on y-axis
color = factor(PV_SYSTEM_SIZE))) +# separate line per system size
geom_line(size = 1) +
facet_wrap(~ country, scales = "free_y") +  # one plot per country
scale_x_continuous(breaks = c(1,5,10)) +
scale_y_continuous(labels = scales::comma) +
labs(
x      = "CO₂ reduction target (%)",
y      = "Homes required (million)",
color  = "PV size (kW)",
title  = "Sensitivity of Homes Required to PV Size and CO₂ Target"
) +
theme_minimal(base_size = 13) +
theme(
legend.position = "bottom",
panel.grid.minor = element_blank()
)
ggplot(asean_summary_data,
aes(x = TARGET_REDUCTION * 100,      # convert to % on x-axis
y = homes_required / 1e6,        # millions of homes on y-axis
color = factor(PV_SYSTEM_SIZE))) +# separate line per system size
geom_line(size = 1) +
facet_wrap(~ country, scales = "free_y") +  # one plot per country
scale_x_continuous(breaks = c(1,5,10)) +
scale_y_continuous(labels = scales::comma) +
labs(
x      = "CO₂ reduction target (%)",
y      = "Homes required (million)",
color  = "PV size (kW)",
title  = "Sensitivity of Homes Required to PV Size and CO2 Target"
) +
theme_minimal(base_size = 13) +
theme(
legend.position = "bottom",
panel.grid.minor = element_blank()
)
ggplot(asean_summary_data,
aes(x = TARGET_REDUCTION * 100,      # convert to % on x-axis
y = homes_required / 1e6,        # millions of homes on y-axis
color = factor(PV_SYSTEM_SIZE))) +# separate line per system size
geom_line(size = 1) +
facet_wrap(~ country, scales = "free_y") +  # one plot per country
scale_x_continuous(breaks = c(1,5,10)) +
scale_y_continuous(labels = scales::comma) +
labs(
x      = "CO₂ reduction target (%)",
y      = "Homes required (million)",
color  = "PV size (kW)",
title  = "Sensitivity of Homes Required to PV Size and CO2 Target"
) +
theme_minimal(base_size = 13) +
theme(
legend.position = "bottom",
panel.grid.minor = element_blank()
)
ggplot(asean_summary_data,
aes(x = TARGET_REDUCTION * 100,      # convert to % on x-axis
y = homes_required / 1e6,        # millions of homes on y-axis
color = factor(PV_SYSTEM_SIZE))) +# separate line per system size
geom_line(size = 1) +
facet_wrap(~ country, scales = "free_y") +  # one plot per country
scale_x_continuous(breaks = c(1,5,10)) +
scale_y_continuous(labels = scales::comma) +
labs(
x      = "CO₂ reduction target (%)",
y      = "Homes required (million)",
color  = "PV size (kW)",
title  = "Sensitivity of Homes Required to PV Size and CO2 Target"
) +
theme_minimal(base_size = 13) +
theme(
legend.position = "bottom",
panel.grid.minor = element_blank()
)
ggplot(asean_summary_data,
aes(x = TARGET_REDUCTION * 100,      # convert to % on x-axis
y = homes_required / 1e6,        # millions of homes on y-axis
color = factor(PV_SYSTEM_SIZE))) +# separate line per system size
geom_line(size = 1) +
facet_wrap(~ country, scales = "free_y") +  # one plot per country
scale_x_continuous(breaks = c(1,5,10)) +
scale_y_continuous(labels = scales::comma) +
labs(
x      = "CO₂ reduction target (%)",
y      = "Homes required (million)",
color  = "PV size (kW)",
title  = "Sensitivity of Homes Needed to PV Size and CO2 Target"
) +
theme_minimal(base_size = 13) +
theme(
legend.position = "bottom",
panel.grid.minor = element_blank()
)
ggplot(asean_summary_data,
aes(x = TARGET_REDUCTION * 100,      # convert to % on x-axis
y = homes_required / 1e6,        # millions of homes on y-axis
color = factor(PV_SYSTEM_SIZE))) +# separate line per system size
geom_line(size = 1) +
facet_wrap(~ country, scales = "free_y") +  # one plot per country
scale_x_continuous(breaks = c(1,5,10)) +
scale_y_continuous(labels = scales::comma) +
labs(
x      = "CO2 reduction target (%)",
y      = "Homes required (million)",
color  = "PV size (kW)",
title  = "Sensitivity of Homes Needed to PV Size and CO2 Target"
) +
theme_minimal(base_size = 13) +
theme(
legend.position = "bottom",
panel.grid.minor = element_blank()
)
ggplot(asean_summary_data,
aes(x = TARGET_REDUCTION * 100,      # convert to % on x-axis
y = homes_required / 1e6,        # millions of homes on y-axis
color = factor(PV_SYSTEM_SIZE))) +# separate line per system size
geom_line(size = 1) +
facet_wrap(~ country, scales = "free_y") +  # one plot per country
scale_x_continuous(breaks = c(1,5,10)) +
scale_y_continuous(labels = scales::comma) +
labs(
x      = "CO2 reduction target (%)",
y      = "Homes required (million)",
color  = "PV size (kW)",
title  = "Sensitivity of Homes Needed to PV Size and CO2 Target Reduction"
) +
theme_minimal(base_size = 13) +
theme(
legend.position = "bottom",
panel.grid.minor = element_blank()
)
ggplot(asean_summary_data,
aes(x = TARGET_REDUCTION * 100,      # convert to % on x-axis
y = homes_required / 1e6,        # millions of homes on y-axis
color = factor(PV_SYSTEM_SIZE))) +# separate line per system size
geom_line(size = 1) +
facet_wrap(~ country, scales = "free_y") +  # one plot per country
scale_x_continuous(breaks = c(1,5,10)) +
scale_y_continuous(labels = scales::comma) +
labs(
x      = "CO2 reduction target (%)",
y      = "Homes required (million)",
color  = "PV size (kW)",
title  = "Sensitivity of Homes Needed to PV Size and CO2 Target"
) +
theme_minimal(base_size = 13) +
theme(
legend.position = "bottom",
panel.grid.minor = element_blank()
)
runApp('inst/app/CO2_Dashboard.R')
