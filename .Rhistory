ds_grid_emission <- read_excel(grid_emission_path, sheet = target_sheet_name, skip = 1, col_names = TRUE)
ds_grid_emission_asean <- ds_grid_emission %>%
select(
country = "Host Party...2",
ef_kgco2_per_kwh = "Combined Margin EF (Average)"
) %>%
mutate(
ef_gco2_per_kwh = ef_kgco2_per_kwh * 1000 # from kg to g
) %>%
filter(country %in% asean_countries2)
View(ds_grid_emission_asean)
out_csv <- file.path("data", "asean_GridEmission.csv")
if (!file.exists(out_csv)) {
write_csv(ds_grid_emission_asean, out_csv)
message(out_csv, " successfully created")
} else {
message("Skipped writing ", out_csv, "; file already exists.")
}
dataset3<- file.path("data-raw", "Household Size and Composition.xlsx")
sheet_name3 <- "HH size and composition 2022"
asean_countries3 <- c(
"Brunei Darussalam",
"Cambodia",
"Indonesia",
"Lao People's Dem. Republic",
"Malaysia",
"Myanmar",
"Philippines",
"Singapore",
"Thailand",
"Viet Nam"
)
asean_household_data <- read_excel(
dataset3,
sheet = sheet_name3,
# Skip the first 4 rows of titles and blank lines.
# Row 5 will be used as the header.
skip = 4
) %>%
# Use clean_names() to automatically fix all the messy, multi-line headers.
clean_names() %>%
filter(country_or_area %in% asean_countries3)
View(asean_household_data)
out_csv <- file.path("data", "asean_Household.csv")
if (!file.exists(out_csv)) {
write_csv(asean_household_data, out_csv)
message(out_csv, " successfully created")
} else {
message("Skipped writing ", out_csv, "; file already exists.")
}
dataset4 <- file.path("data-raw", "Global Electricity Demand and Generation Dataset.csv")
asean_countries4 <- c(
"Cambodia",
"Indonesia",
"Laos",
"Malaysia",
"Myanmar",
"Philippines",
"Singapore",
"Thailand",
"VietNam"
)
asean_electricity_data <- read_csv(dataset4) %>%
clean_names() %>%
filter(entity %in% asean_countries4) %>%
arrange(entity, year)
View(asean_electricity_data)
out_csv <- file.path("data", "asean_Electricity.csv")
if (!file.exists(out_csv)) {
write_csv(asean_electricity_data, out_csv)
message(out_csv, " successfully created")
} else {
message("Skipped writing ", out_csv, "; file already exists.")
}
ds_pv_dir <- file.path("data-raw", "asean_pv_output")
target_sheet_name <- "PVOUT_stats"
cell_ref <- "B4"
get_pv_out_avg <- function(path, sheet = target_sheet_name, cell = cell_ref) {
if (!(sheet %in% excel_sheets(path)))
return(NA)
read_excel(
path,
sheet = sheet,
range = cell,
col_names = FALSE
) %>%
pull(1)
}
asean_pv_data <- list.files(
ds_pv_dir,
pattern = "\\.xlsx$",
full.names = TRUE
) %>%
map_dfr(
~ tibble(
country = basename(.x) %>%
str_remove("^GSA_Report_") %>%
str_remove(".xlsx$"),
daily_pv_average = get_pv_out_avg(.x)
),
.id = NULL
) %>%
mutate(
country = recode(
country,
"Brunei Darussalam"                 = "Brunei",
"Lao People's Democratic Republic"  = "Laos",
"Viet Nam"                          = "Vietnam",
.default = country
),
yearly_pv = daily_pv_average * 365,
solar_capacity_factor = yearly_pv / 8760 # 8760 -> number of hours in a (nonâ€‘leap) year
)
print(asean_pv_data)
out_csv <- file.path("data", "asean_PV.csv")
if (!file.exists(out_csv)) {
write_csv(asean_pv_data, out_csv)
message(out_csv, " successfully created")
} else {
message("Skipped writing ", out_csv, "; file already exists.")
}
view(asean_pv_data)
View(asean_pv_data)
out_csv <- file.path("data", "asean_co2_emissions.csv")
if (!file.exists(out_csv)) {
write_csv(long_format_data, out_csv)
message(out_csv, " successfully created")
} else {
message("Skipped writing ", out_csv, "; file already exists.")
}
out_csv <- file.path("data", "asean_GridEmission.csv")
if (!file.exists(out_csv)) {
write_csv(ds_grid_emission_asean, out_csv)
message(out_csv, " successfully created")
} else {
message("Skipped writing ", out_csv, "; file already exists.")
}
out_csv <- file.path("data", "asean_Household.csv")
if (!file.exists(out_csv)) {
write_csv(asean_household_data, out_csv)
message(out_csv, " successfully created")
} else {
message("Skipped writing ", out_csv, "; file already exists.")
}
out_csv <- file.path("data", "asean_Electricity.csv")
if (!file.exists(out_csv)) {
write_csv(asean_electricity_data, out_csv)
message(out_csv, " successfully created")
} else {
message("Skipped writing ", out_csv, "; file already exists.")
}
out_csv <- file.path("data", "asean_PV.csv")
if (!file.exists(out_csv)) {
write_csv(asean_pv_data, out_csv)
message(out_csv, " successfully created")
} else {
message("Skipped writing ", out_csv, "; file already exists.")
}
out_csv <- file.path("data", "asean_PV.csv")
if (!file.exists(out_csv)) {
write_csv(asean_pv_data, out_csv)
message(out_csv, " successfully created")
} else {
message("Skipped writing ", out_csv, "; file already exists.")
}
co2_emissions_clean <- long_format_data %>%
# Standardize country names
mutate(
Country = recode(
Country,
"Brunei Darussalam" = "Brunei",
"Laos" = "Laos", # Already standard
"Vietnam" = "Vietnam", # Already standard
.default = Country
),
# Convert Year to a numeric type for joining
Year = as.numeric(Year)
) %>%
# Rename columns to standard names
rename(
country = Country,
year = Year,
edgar_country_code = `EDGAR Country Code`,
co2_emissions_tonnes = CO2_Emissions # More descriptive name
)
co2_emissions_clean <- long_format_data %>%
# Standardize country names
mutate(
Country = recode(
Country,
"Brunei Darussalam" = "Brunei",
"Laos" = "Laos", # Already standard
"Vietnam" = "Vietnam", # Already standard
.default = Country
),
# Convert Year to a numeric type for joining
Year = as.numeric(Year)
) %>%
# Rename columns to standard names
rename(
country = Country,
year = Year,
edgar_country_code = `EDGAR Country Code`,
co2_emissions_tonnes = CO2_Emissions # More descriptive name
)
grid_emission_clean <- ds_grid_emission_asean %>%
mutate(
country = recode(
country,
"Brunei Darussalam" = "Brunei",
"Lao PDR" = "Laos",
"Viet Nam" = "Vietnam",
.default = country
)
)
electricity_data_clean <- asean_electricity_data %>%
mutate(
entity = recode(
entity,
"Laos" = "Laos", # Already standard
"VietNam" = "Vietnam",
.default = entity
)
) %>%
rename(country = entity)
pv_data_clean <- asean_pv_data %>%
rename(country = country)
merged_dataset <- full_join(
co2_emissions_clean,
electricity_data_clean,
by = c("country", "year")
)
merged_dataset <- full_join(
merged_dataset,
grid_emission_clean,
by = "country"
)
merged_dataset <- full_join(
merged_dataset,
pv_data_clean,
by = "country"
)
final_merged_data <- merged_dataset %>%
arrange(country, year)
View(final_merged_data)
out_csv <- file.path("data", "merged_dataset.csv")
if (!file.exists(out_csv)) {
write_csv(final_merged_data, out_csv) # Write NA as empty strings
message(out_csv, " successfully created")
} else {
message("Skipped writing ", out_csv, "; file already exists.")
}
library(readxl)
library(readr)
library(dplyr)
library(tidyr)
library(magrittr)
library(purrr)
library(stringr)
library(janitor)
View(final_merged_data)
dataset1 <- file.path("data-raw", "original", "IEA-EDGAR fossil CO2 emissions.xlsx")
read_dataset <- read_excel(dataset1, sheet = "fossil_CO2_by_sector_country_su")
asean_countries <- c(
"Brunei",
"Cambodia",
"Indonesia",
"Laos",
"Malaysia",
"Myanmar/Burma",
"Philippines",
"Singapore",
"Thailand",
"Viet Nam"
)
# filtering the data to display ASEAN Countries only
asean_co2_data <- read_dataset %>%
filter(Country %in% asean_countries)
# Use arrange for dealing multiple country but different sectors
sorted_asean_data <- asean_co2_data %>%
arrange(Country, Sector)
# Convert from wide format to long format
long_format_data <- sorted_asean_data %>%
pivot_longer(
cols = -c(Substance, Sector, `EDGAR Country Code`, Country),
names_to = "Year",
values_to = "CO2_Emissions"
)
grid_emission_path <- file.path("data-raw", "original", "IGES_GRID_EF_v11.6_20250226.xlsx")
target_sheet_name <- "SummaryEFfromCDM"
asean_countries2 <- c(
"Brunei Darussalam",
"Cambodia",
"Indonesia",
"Lao PDR",
"Malaysia",
"Myanmar",
"Philippines",
"Singapore",
"Thailand",
"Viet Nam"
)
ds_grid_emission <- read_excel(grid_emission_path, sheet = target_sheet_name, skip = 1, col_names = TRUE)
ds_grid_emission_asean <- ds_grid_emission %>%
select(
country = "Host Party...2",
ef_kgco2_per_kwh = "Combined Margin EF (Average)"
) %>%
mutate(
ef_gco2_per_kwh = ef_kgco2_per_kwh * 1000 # from kg to g
) %>%
filter(country %in% asean_countries2)
dataset3<- file.path("data-raw", "original", "Household Size and Composition.xlsx")
sheet_name3 <- "HH size and composition 2022"
asean_countries3 <- c(
"Brunei Darussalam",
"Cambodia",
"Indonesia",
"Lao People's Dem. Republic",
"Malaysia",
"Myanmar",
"Philippines",
"Singapore",
"Thailand",
"Viet Nam"
)
asean_household_data <- read_excel(
dataset3,
sheet = sheet_name3,
# Skip the first 4 rows of titles and blank lines.
# Row 5 will be used as the header.
skip = 4
) %>%
# Use clean_names() to automatically fix all the messy, multi-line headers.
clean_names() %>%
filter(country_or_area %in% asean_countries3)
dataset4 <- file.path("data-raw", "original", "Global Electricity Demand and Generation Dataset.csv")
asean_countries4 <- c(
"Cambodia",
"Indonesia",
"Laos",
"Malaysia",
"Myanmar",
"Philippines",
"Singapore",
"Thailand",
"VietNam"
)
asean_electricity_data <- read_csv(dataset4) %>%
clean_names() %>%
filter(entity %in% asean_countries4) %>%
arrange(entity, year)
ds_pv_dir <- file.path("data-raw", "original", "asean_pv_output")
target_sheet_name <- "PVOUT_stats"
cell_ref <- "B4"
# Function to extract PVOUTPUT average from GSA data
get_pv_out_avg <- function(path, sheet = target_sheet_name, cell = cell_ref) {
if (!(sheet %in% excel_sheets(path)))
return(NA)
read_excel(
path,
sheet = sheet,
range = cell,
col_names = FALSE
) %>%
pull(1)
}
asean_pv_data <- list.files(
ds_pv_dir,
pattern = "\\.xlsx$",
full.names = TRUE
) %>%
map_dfr(
~ tibble(
country = basename(.x) %>%
str_remove("^GSA_Report_") %>%
str_remove(".xlsx$"),
daily_pv_average = get_pv_out_avg(.x)
),
.id = NULL
) %>%
mutate(
country = recode(
country,
"Brunei Darussalam"                 = "Brunei",
"Lao People's Democratic Republic"  = "Laos",
"Viet Nam"                          = "Vietnam",
.default = country
),
yearly_pv = daily_pv_average * 365,
solar_capacity_factor = yearly_pv / 8760 # 8760 -> number of hours in a (nonâ€‘leap) year
)
co2_emissions_clean <- long_format_data %>%
mutate(
Country = recode(
Country,
"Myanmar/Burma" = "Myanmar",
"Viet Nam" = "Vietnam",
.default = Country
),
# Convert Year to a numeric type for joining
Year = as.numeric(Year)
) %>%
filter(
Year == max(Year, na.rm = TRUE) &
Sector == "Power Industry"
) %>%
select(
country = Country,
co2_emissions_tonnes = CO2_Emissions
)
grid_emission_clean <- ds_grid_emission_asean %>%
mutate(
country = recode(
country,
"Brunei Darussalam" = "Brunei",
"Lao PDR" = "Laos",
"Viet Nam" = "Vietnam",
.default = country
)
)
## Joining the dataset now
merged_dataset <- full_join(
co2_emissions_clean,
grid_emission_clean,
by = "country"
)
merged_dataset <- full_join(
merged_dataset,
asean_pv_data,
by = "country"
)
## Finalized the dataset
final_merged_data <- merged_dataset %>%
arrange(country)
View(final_merged_data)
install.packages("rmarkdown")
install.packages("knitr")
install.packages("ggplot")
library(tidyverse)
library(ggplot2)
library(scales)
library(ggrepel)
install.packages("ggprepel")
install.packages("ggrepel")
# Load necessary libraries
library(tidyverse)
library(ggplot2)
library(scales)
library(ggrepel)
knitr::opts_chunk$set(echo = TRUE)
co2_emissions <- read_csv("data/asean_co2_emissions.csv")
setwd("~/asean-pv-co2-abatement")
co2_emissions <- read_csv("data/asean_co2_emissions.csv")
setwd("~/asean-pv-co2-abatement")
co2_emissions <- read_csv("data/asean_co2_emissions.csv")
co2_emissions <- read_csv("data-raw/interim/asean_co2_emissions.csv")
co2_emissions <- read_csv("../data-raw/interim/asean_co2_emissions.csv")
grid_emission <- read_csv("../data-raw/interim/asean_GridEmission.csv")
pv_potential <- read_csv("../data-raw/interim/asean_PV.csv")
summary_final <- read_csv("../data/asean_summary_final.csv")
power_emissions_2023 <- co2_emissions %>%
filter(Sector == "Power Industry", Year == 2023) %>%
mutate(
co2_emissions_mt = co2_emissions_g / 1e12, # Convert grams to million metric tons
country = fct_reorder(country, co2_emissions_mt)
)
ggplot(power_emissions_2023, aes(x = co2_emissions_mt, y = country, fill = co2_emissions_mt)) +
geom_col(show.legend = FALSE) +
geom_text(aes(label = paste(round(co2_emissions_mt), "M")), hjust = -0.1, size = 3.5, color = "black") +
scale_fill_gradient(low = "lightblue", high = "darkred") +
scale_x_continuous(labels = scales::comma_format(suffix = " M tons"), expand = expansion(mult = c(0, 0.15))) +
labs(
title = "Power Industry COâ‚‚ Emissions in ASEAN (2023)",
subtitle = "Indonesia is the largest emitter, followed by Vietnam and Malaysia.",
x = "COâ‚‚ Emissions (Million Metric Tons)",
y = "Country"
) +
theme_minimal(base_size = 14) +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.x = element_blank(),
axis.title.y = element_blank())
library(tidyverse)
library(ggplot2)
library(scales)
library(ggrepel)
knitr::opts_chunk$set(echo = TRUE)
co2_emissions <- read_csv("../data-raw/interim/asean_co2_emissions.csv")
grid_emission <- read_csv("../data-raw/interim/asean_GridEmission.csv")
pv_potential <- read_csv("../data-raw/interim/asean_PV.csv")
summary_final <- read_csv("../data/asean_summary_final.csv")
power_emissions_2023 <- co2_emissions %>%
filter(Sector == "Power Industry", Year == 2023) %>%
mutate(
co2_emissions_mt = co2_emissions_g / 1e12, # Convert grams to million metric tons
country = fct_reorder(country, co2_emissions_mt)
)
ggplot(power_emissions_2023, aes(x = co2_emissions_mt, y = country, fill = co2_emissions_mt)) +
geom_col(show.legend = FALSE) +
geom_text(aes(label = paste(round(co2_emissions_mt), "M")), hjust = -0.1, size = 3.5, color = "black") +
scale_fill_gradient(low = "lightblue", high = "darkred") +
scale_x_continuous(labels = scales::comma_format(suffix = " M tons"), expand = expansion(mult = c(0, 0.15))) +
labs(
title = "Power Industry COâ‚‚ Emissions in ASEAN (2023)",
subtitle = "Indonesia is the largest emitter, followed by Vietnam and Malaysia.",
x = "COâ‚‚ Emissions (Million Metric Tons)",
y = "Country"
) +
theme_minimal(base_size = 14) +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.x = element_blank(),
axis.title.y = element_blank())
